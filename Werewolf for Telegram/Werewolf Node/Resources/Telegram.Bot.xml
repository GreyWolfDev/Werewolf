<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telegram.Bot</name>
    </assembly>
    <members>
        <member name="P:Telegram.Bot.Client.UploadTimeout">
            <summary>
            Timeout for uploading Files/Videos/Documents etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Client.PollingTimeout">
            <summary>
            Timeout for long-polling
            </summary>
        </member>
        <member name="P:Telegram.Bot.Client.IsReceiving">
            <summary>
            Indecates if receiving updates
            </summary>
        </member>
        <member name="P:Telegram.Bot.Client.MessageOffset">
            <summary>
            The current message offset
            </summary>
        </member>
        <member name="E:Telegram.Bot.Client.UpdateReceived">
            <summary>
            Fired when any updates are availible
            </summary>
        </member>
        <member name="E:Telegram.Bot.Client.StatusChanged">
            <summary>
            Fired when any updates are availible
            </summary>
        </member>
        <member name="E:Telegram.Bot.Client.MessageReceived">
            <summary>
            Fired when messages are availible
            </summary>
        </member>
        <member name="E:Telegram.Bot.Client.InlineQueryReceived">
            <summary>
            Fired when inline queries are availible
            </summary>
        </member>
        <member name="E:Telegram.Bot.Client.ChosenInlineResultReceived">
            <summary>
            Fired when chosen inline results are availible
            </summary>
        </member>
        <member name="E:Telegram.Bot.Client.CallbackQueryReceived">
            <summary>
            Fired when an callback query is received
            </summary>
        </member>
        <member name="M:Telegram.Bot.Client.#ctor(System.String,System.String)">
            <summary>
            Creat new Telegram Bot Api Client
            </summary>
            <param name="token">API token</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="token"/> format is invvalid</exception>
        </member>
        <member name="M:Telegram.Bot.Client.TestApi">
            <summary>
            Test the API token
            </summary>
            <returns><c>true</c> if token is valid</returns>
        </member>
        <member name="M:Telegram.Bot.Client.StartReceiving">
            <summary>
            Start update receiving
            </summary>
            <exception cref="T:Telegram.Bot.Exceptions.ApiRequestException"> Thrown if token is invalid</exception>
        </member>
        <member name="M:Telegram.Bot.Client.StartReceiving(System.TimeSpan)">
            <summary>
            Start update receiving
            </summary>
            <exception cref="T:Telegram.Bot.Exceptions.ApiRequestException"> Thrown if token is invalid</exception>
        </member>
        <member name="M:Telegram.Bot.Client.StopReceiving">
            <summary>
            Stop update receiving
            </summary>
        </member>
        <member name="M:Telegram.Bot.Client.GetMe">
            <summary>
            A simple method for testing your bot's auth token.
            </summary>
            <returns>Returns basic information about the bot in form of <see cref="T:Telegram.Bot.Types.User"/> object</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetUpdates(System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this method to receive incoming updates using long polling.
            </summary>
            <param name="offset">
            Identifier of the first update to be returned.
            </param>
            <param name="limit">
            Limits the number of updates to be retrieved. Values between 1—100 are accepted. Defaults to 100
            </param>
            <param name="timeout">
            Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling
            </param>
            <remarks>
            1. This method will not work if an outgoing webhook is set up.
            2. In order to avoid getting duplicate updates, recalculate offset after each server response.
            
            Must be greater by one than the highest among the identifiers of previously received updates. 
            By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as GetUpdates is called with an offset higher than its Id.
            </remarks>
            <returns>An Array of <see cref="T:Telegram.Bot.Types.Update"/> is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SetWebhook(System.String,System.Nullable{Telegram.Bot.Types.FileToSend})">
            <summary>
            Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will
            send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will
            give up after a reasonable amount of attempts.
            </summary>
            <param name="url">Optional. HTTPS url to send updates to. Use an empty string to remove webhook integration</param>
            <param name="certificate">Upload your public key certificate so that the root certificate in use can be checked</param>
            <remarks>
            1. You will not be able to receive updates using getUpdates for as long as an outgoing webhook is set up.
            2. We currently do not support self-signed certificates.
            3. For the moment, the only supported port for Webhooks is 443. We may support additional ports later.
            </remarks>
        </member>
        <member name="M:Telegram.Bot.Client.SendTextMessage(System.Int64,System.String,System.Boolean,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.Enums.ParseMode)">
            <summary>
            Use this method to send text messages. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="text">Text of the message to be sent</param>
            <param name="disableWebPagePreview">Optional. Disables link previews for links in this message</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <param name="parseMode">Optional. Change, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendTextMessage(System.String,System.String,System.Boolean,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,Telegram.Bot.Types.Enums.ParseMode)">
            <summary>
            Use this method to send text messages. On success, the sent Message is returned.
            </summary>
            <param name="chatId">username of the target channel (in the format @channelusername)</param>
            <param name="text">Text of the message to be sent</param>
            <param name="disableWebPagePreview">Optional. Disables link previews for links in this message</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <param name="parseMode">Optional. Change, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.ForwardMessage(System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Use this method to forward messages of any kind. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="fromChatId">Unique identifier for the chat where the original message was sent</param>
            <param name="messageId">Unique message identifier</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.ForwardMessage(System.Int64,System.String,System.Int32,System.Boolean)">
            <summary>
            Use this method to forward messages of any kind. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="fromChatId">channel username in the format @channelusername</param>
            <param name="messageId">Unique message identifier</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.ForwardMessage(System.String,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Use this method to forward messages of any kind. On success, the sent Message is returned.
            </summary>
            <param name="chatId">username of the target channel (in the format @channelusername)</param>
            <param name="fromChatId">Unique identifier for the chat where the original message was sent</param>
            <param name="messageId">Unique message identifier</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.ForwardMessage(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Use this method to forward messages of any kind. On success, the sent Message is returned.
            </summary>
            <param name="chatId">username of the target channel (in the format @channelusername)</param>
            <param name="fromChatId">channel username in the format @channelusername</param>
            <param name="messageId">Unique message identifier</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendPhoto(System.Int64,Telegram.Bot.Types.FileToSend,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send photos. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="photo">Photo to send. You can either pass a file_id as String to resend a photo that is already on the Telegram servers, or upload a new photo using multipart/form-data.</param>
            <param name="caption">Optional. Photo caption (may also be used when resending photos by file_id).</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendPhoto(System.String,Telegram.Bot.Types.FileToSend,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send photos. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="photo">Photo to send. You can either pass a file_id as String to resend a photo that is already on the Telegram servers, or upload a new photo using multipart/form-data.</param>
            <param name="caption">Optional. Photo caption (may also be used when resending photos by file_id).</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendPhoto(System.Int64,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send photos. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="photo">Photo to send. You can either pass a file_id as String to resend a photo that is already on the Telegram servers, or upload a new photo using multipart/form-data.</param>
            <param name="caption">Optional. Photo caption (may also be used when resending photos by file_id).</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendPhoto(System.String,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send photos. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="photo">Photo to send. You can either pass a file_id as String to resend a photo that is already on the Telegram servers, or upload a new photo using multipart/form-data.</param>
            <param name="caption">Optional. Photo caption (may also be used when resending photos by file_id).</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendAudio(System.Int64,Telegram.Bot.Types.FileToSend,System.Int32,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendAudio(System.String,Telegram.Bot.Types.FileToSend,System.Int32,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .mp3 format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendAudio(System.Int64,System.String,System.Int32,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Document). On success, the sent Message is returned. Bots can send audio files of up to 50 MB in size.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendAudio(System.String,System.String,System.Int32,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Document). On success, the sent Message is returned. Bots can send audio files of up to 50 MB in size.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of the audio in seconds</param>
            <param name="performer">Performer</param>
            <param name="title">Track name</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendContact(System.Int64,System.String,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send phone contacts.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
            <param name="lastName">Contact's last name</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendContact(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send phone contacts.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="phoneNumber">Contact's phone number</param>
            <param name="firstName">Contact's first name</param>
            <param name="lastName">Contact's last name</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendDocument(System.Int64,Telegram.Bot.Types.FileToSend,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send general files. On success, the sent Message is returned. Bots can send files of any type of up to 50 MB in size.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="document">File to send. You can either pass a file_id as String to resend a file that is already on the Telegram servers, or upload a new file using multipart/form-data.</param>
            <param name="caption">Document caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendDocument(System.String,Telegram.Bot.Types.FileToSend,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send general files. On success, the sent Message is returned. Bots can send files of any type of up to 50 MB in size.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="document">File to send. You can either pass a file_id as String to resend a file that is already on the Telegram servers, or upload a new file using multipart/form-data.</param>
            <param name="caption">Document caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendDocument(System.Int64,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send general files. On success, the sent Message is returned. Bots can send files of any type of up to 50 MB in size.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="document">File to send. You can either pass a file_id as String to resend a file that is already on the Telegram servers, or upload a new file using multipart/form-data.</param>
            <param name="caption">Document caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendDocument(System.String,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send general files. On success, the sent Message is returned. Bots can send files of any type of up to 50 MB in size.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="document">File to send. You can either pass a file_id as String to resend a file that is already on the Telegram servers, or upload a new file using multipart/form-data.</param>
            <param name="caption">Document caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendSticker(System.Int64,Telegram.Bot.Types.FileToSend,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send .webp stickers. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="sticker">Sticker to send. You can either pass a file_id as String to resend a sticker that is already on the Telegram servers, or upload a new sticker using multipart/form-data.</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendSticker(System.String,Telegram.Bot.Types.FileToSend,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send .webp stickers. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="sticker">Sticker to send. You can either pass a file_id as String to resend a sticker that is already on the Telegram servers, or upload a new sticker using multipart/form-data.</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendSticker(System.Int64,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send .webp stickers. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="sticker">Sticker to send. You can either pass a file_id as String to resend a sticker that is already on the Telegram servers, or upload a new sticker using multipart/form-data.</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendSticker(System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send .webp stickers. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="sticker">Sticker to send. You can either pass a file_id as String to resend a sticker that is already on the Telegram servers, or upload a new sticker using multipart/form-data.</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVenue(System.Int64,System.Single,System.Single,System.String,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send information about a venue.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="latitude">Latitude of the venue</param>
            <param name="longitude">Longitude of the venue</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
            <param name="foursquareId">Foursquare identifier of the venue</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVenue(System.String,System.Single,System.Single,System.String,System.String,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send information about a venue.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="latitude">Latitude of the venue</param>
            <param name="longitude">Longitude of the venue</param>
            <param name="title">Name of the venue</param>
            <param name="address">Address of the venue</param>
            <param name="foursquareId">Foursquare identifier of the venue</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVideo(System.Int64,Telegram.Bot.Types.FileToSend,System.Int32,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can send video files of up to 50 MB in size.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="video">Video to send. You can either pass a file_id as String to resend a video that is already on the Telegram servers, or upload a new video file using multipart/form-data.</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="caption">Video caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVideo(System.String,Telegram.Bot.Types.FileToSend,System.Int32,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can send video files of up to 50 MB in size.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="video">Video to send. You can either pass a file_id as String to resend a video that is already on the Telegram servers, or upload a new video file using multipart/form-data.</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="caption">Video caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVideo(System.Int64,System.String,System.Int32,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can send video files of up to 50 MB in size.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="video">Video to send. You can either pass a file_id as String to resend a video that is already on the Telegram servers, or upload a new video file using multipart/form-data.</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="caption">Video caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVideo(System.String,System.String,System.Int32,System.String,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can send video files of up to 50 MB in size.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="video">Video to send. You can either pass a file_id as String to resend a video that is already on the Telegram servers, or upload a new video file using multipart/form-data.</param>
            <param name="duration">Duration of sent video in seconds</param>
            <param name="caption">Video caption</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVoice(System.Int64,Telegram.Bot.Types.FileToSend,System.Int32,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of sent audio in seconds</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVoice(System.String,Telegram.Bot.Types.FileToSend,System.Int32,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of sent audio in seconds</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVoice(System.Int64,System.String,System.Int32,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of sent audio in seconds</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendVoice(System.String,System.String,System.Int32,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="audio">Audio file to send. You can either pass a file_id as String to resend an audio that is already on the Telegram servers, or upload a new audio file using multipart/form-data.</param>
            <param name="duration">Duration of sent audio in seconds</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendLocation(System.Int64,System.Single,System.Single,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send point on the map. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="latitude">Latitude of location</param>
            <param name="longitude">Longitude of location</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendLocation(System.String,System.Single,System.Single,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to send point on the map. On success, the sent Message is returned.
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="latitude">Latitude of location</param>
            <param name="longitude">Longitude of location</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendChatAction(System.Int64,Telegram.Bot.Types.Enums.ChatAction)">
            <summary>
            Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="chatAction">Type of action to broadcast. Choose one, depending on what the user is about to receive.</param>
            <remarks>We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.</remarks>
        </member>
        <member name="M:Telegram.Bot.Client.SendChatAction(System.String,Telegram.Bot.Types.Enums.ChatAction)">
            <summary>
            Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status).
            </summary>
            <param name="chatId">Username of the target channel (in the format @channelusername)</param>
            <param name="chatAction">Type of action to broadcast. Choose one, depending on what the user is about to receive.</param>
            <remarks>We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.</remarks>
        </member>
        <member name="M:Telegram.Bot.Client.GetChatAdministrators(System.Int64)">
            <summary>
            Use this method to get a list of administrators in a chat.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <returns>On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetChatAdministrators(System.String)">
            <summary>
            Use this method to get a list of administrators in a chat.
            </summary>
            <param name="chatId">Username of the target supergroup or channel (in the format @channelusername)</param>
            <returns>On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetChatMembersCount(System.Int64)">
            <summary>
            Use this method to get the number of members in a chat.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <returns>Returns Int on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetChatMembersCount(System.String)">
            <summary>
            Use this method to get the number of members in a chat.
            </summary>
            <param name="chatId">Username of the target supergroup or channel (in the format @channelusername)</param>
            <returns>Returns Int on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetChatMember(System.Int64,System.Int32)">
            <summary>
            Use this method to get information about a member of a chat.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>Returns a ChatMember object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetChatMember(System.String,System.Int32)">
            <summary>
            Use this method to get information about a member of a chat.
            </summary>
            <param name="chatId">Username of the target supergroup or channel (in the format @channelusername)</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>Returns a ChatMember object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetChat(System.Int64)">
            <summary>
            Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.).
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <returns>Returns a Chat object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetChat(System.String)">
            <summary>
            Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.).
            </summary>
            <param name="chatId">Username of the target supergroup or channel (in the format @channelusername)</param>
            <returns>Returns a Chat object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.LeaveChat(System.Int64)">
            <summary>
            Use this method for your bot to leave a group, supergroup or channel.
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <returns>Returns a Chat object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.LeaveChat(System.String)">
            <summary>
            Use this method for your bot to leave a group, supergroup or channel.
            </summary>
            <param name="chatId">Username of the target supergroup or channel (in the format @channelusername)</param>
            <returns>Returns a Chat object on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.KickChatMember(System.Int64,System.Int32)">
            <summary>
            Use this method to kick a user from a group or a supergroup. In the case of supergroups, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the group for this to work.
            </summary>
            <param name="chatId">Unique identifier for the target group</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.KickChatMember(System.String,System.Int32)">
            <summary>
            Use this method to kick a user from a group or a supergroup. In the case of supergroups, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the group for this to work.
            </summary>
            <param name="chatId">Username of the target supergroup (in the format @supergroupusername)</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.UnbanChatMember(System.Int64,System.Int32)">
            <summary>
            Use this method to unban a previously kicked user in a supergroup. The user will not return to the group automatically, but will be able to join via link, etc. The bot must be an administrator in the group for this to work. 
            </summary>
            <param name="chatId">Unique identifier for the target group</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.UnbanChatMember(System.String,System.Int32)">
            <summary>
            Use this method to unban a previously kicked user in a supergroup. The user will not return to the group automatically, but will be able to join via link, etc. The bot must be an administrator in the group for this to work. 
            </summary>
            <param name="chatId">Username of the target supergroup (in the format @supergroupusername)</param>
            <param name="userId">Unique identifier of the target user</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetUserProfilePhotos(System.Int32,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.
            </summary>
            <param name="userId">Unique identifier of the target user</param>
            <param name="offset">Optional. Sequential number of the first photo to be returned. By default, all photos are returned.</param>
            <param name="limit">Optional. Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100.</param>
            <returns></returns>
        </member>
        <member name="M:Telegram.Bot.Client.GetFile(System.String,System.IO.Stream)">
            <summary>
            Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size.
            </summary>
            <param name="fileId">File identifier</param>
            <param name="destination">The destination stream</param>
            <returns>The File object. If destination is empty stream ist embedded in the File Object</returns>
        </member>
        <member name="M:Telegram.Bot.Client.AnswerInlineQuery(System.String,Telegram.Bot.Types.InlineQueryResults.InlineQueryResult[],System.Nullable{System.Int32},System.Boolean,System.String,System.String,System.String)">
            <summary>
            Use this method to send answers to an inline query.
            </summary>
            <param name="inlineQueryId">Unique identifier for answered query</param>
            <param name="results">A array of results for the inline query</param>
            <param name="cacheTime">Optional. The maximum amount of time in seconds the result of the inline query may be cached on the server</param>
            <param name="isPersonal">Optional. Pass True, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query</param>
            <param name="nextOffset">Optional. Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don‘t support pagination. Offset length can’t exceed 64 bytes.</param>
            <param name="switchPmText">If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter switch_pm_parameter</param>
            <param name="switchPmParameter">Parameter for the start message sent to the bot when user presses the switch button</param>
            <returns>On success, True is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.AnswerCallbackQuery(System.String,System.String,System.Boolean)">
            <summary>
            Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert.
            </summary>
            <param name="callbackQueryId">Unique identifier for the query to be answered</param>
            <param name="text">Text of the notification. If not specified, nothing will be shown to the user</param>
            <param name="showAlert">If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.</param>
            <returns>On success, True is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditMessageText(System.Int64,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Boolean,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit text messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Unique identifier of the sent message</param>
            <param name="text">New text of the message</param>
            <param name="parseMode">Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</param>
            <param name="disableWebPagePreview">Disables link previews for links in this message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditMessageText(System.String,System.Int32,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Boolean,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit text messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="chatId">username of the target channel (in the format @channelusername)</param>
            <param name="messageId">Unique identifier of the sent message</param>
            <param name="text">New text of the message</param>
            <param name="parseMode">Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</param>
            <param name="disableWebPagePreview">Disables link previews for links in this message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditInlineMessageText(System.String,System.String,Telegram.Bot.Types.Enums.ParseMode,System.Boolean,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit text messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="inlineMessageId">Identifier of the inline message</param>
            <param name="text">New text of the message</param>
            <param name="parseMode">Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.</param>
            <param name="disableWebPagePreview">Disables link previews for links in this message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditMessageCaption(System.Int64,System.Int32,System.String,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Unique identifier of the sent message</param>
            <param name="caption">New caption of the message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditMessageCaption(System.String,System.Int32,System.String,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="chatId">username of the target channel (in the format @channelusername)</param>
            <param name="messageId">Unique identifier of the sent message</param>
            <param name="caption">New caption of the message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditInlineMessageCaption(System.String,System.String,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit captions of messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="inlineMessageId">Unique identifier of the sent message</param>
            <param name="caption">New caption of the message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditMessageReplyMarkup(System.Int64,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="chatId">Unique identifier for the target chat</param>
            <param name="messageId">Unique identifier of the sent message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditMessageReplyMarkup(System.String,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="chatId">username of the target channel (in the format @channelusername)</param>
            <param name="messageId">Unique identifier of the sent message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.EditInlineMessageReplyMarkup(System.String,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup)">
            <summary>
            Use this method to edit only the reply markup of messages sent by the bot or via the bot (for inline bots).
            </summary>
            <param name="inlineMessageId">Unique identifier of the sent message</param>
            <param name="replyMarkup">A JSON-serialized object for an inline keyboard.</param>
            <returns>On success, the edited Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendMessage(Telegram.Bot.Types.Enums.MessageType,System.String,System.Object,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Use this method to send any messages. On success, the sent Message is returned.
            </summary>
            <param name="type">The <see cref="T:Telegram.Bot.Types.Enums.MessageType"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format @channelusername)</param>
            <param name="content">The content of the message. Could be a text, photo, audio, sticker, document, video or location</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <param name="additionalParameters">Optional. if additional Parameters could bei send i.e. "disable_web_page_preview" in for a TextMessage</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Client.SendMessage(Telegram.Bot.Types.Enums.MessageType,System.String,System.Object,System.Boolean,System.Int32,Telegram.Bot.Types.ReplyMarkups.IReplyMarkup,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Use this method to send any messages. On success, the sent Message is returned.
            </summary>
            <param name="type">The <see cref="T:Telegram.Bot.Types.Enums.MessageType"/></param>
            <param name="chatId">Unique identifier for the target chat or username of the target channel (in the format @channelusername)</param>
            <param name="content">The content of the message. Could be a text, photo, audio, sticker, document, video or location</param>
            <param name="disableNotification">Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.</param>
            <param name="replyToMessageId">Optional. If the message is a reply, ID of the original message</param>
            <param name="replyMarkup">Optional. Additional interface options. A JSON-serialized object for a custom reply keyboard, instructions to hide keyboard or to force a reply from the user.</param>
            <param name="additionalParameters">Optional. if additional Parameters could bei send i.e. "disable_web_page_preview" in for a TextMessage</param>
            <returns>On success, the sent Message is returned.</returns>
        </member>
        <member name="M:Telegram.Bot.Converters.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telegram.Bot.Converters.UnixDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
              Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telegram.Bot.Converters.UnixDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telegram.Bot.Exceptions.ApiRequestException">
            <summary>
            Represents an api error
            </summary>
        </member>
        <member name="P:Telegram.Bot.Exceptions.ApiRequestException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="T:Telegram.Bot.Types.ApiResponse`1">
            <summary>
            The Api Response
            </summary>
            <typeparam name="T">The resultant object</typeparam>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Ok">
            <summary>
            Gets a value indicating whether the request was successful.
            </summary>
            <value>
              <c>true</c> if the request was successful and the result of the query can be found in the ‘result’ field, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.ResultObject">
            <summary>
            Gets the result object.
            </summary>
            <value>
            The result object.
            </value>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            The error message.
            </value>
        </member>
        <member name="P:Telegram.Bot.Types.ApiResponse`1.Code">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="T:Telegram.Bot.Types.Audio">
            <summary>
            This object represents an audio file to be treated as music by the Telegram clients.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Duration">
            <summary>
            Duration of the audio in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Performer">
            <summary>
            Performer of the audio as defined by sender or by audio tags
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.Title">
            <summary>
            Title of the audio as defined by sender or by audio tags
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Audio.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.CallbackQuery">
            <summary>
            This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be presented. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be presented.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Id">
            <summary>
            Unique identifier for this query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.From">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Message">
            <summary>
            Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.InlineMessageId">
            <summary>
            Optional. Identifier of the message sent via the bot in inline mode, that originated the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.CallbackQuery.Data">
            <summary>
            Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Chat">
            <summary>
            This object represents a chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Id">
            <summary>
            Unique identifier for this chat, not exceeding 1e13 by absolute value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Type">
            <summary>
            Type of chat, can be either "Private", or "Group", or "Channel"
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Title">
            <summary>
            Optional. Title, for channels and group chats
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.Username">
            <summary>
            Optional. Username, for private chats and channels if available
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.FirstName">
            <summary>
            Optional. First name of the other party in a private chat
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Chat.LastName">
            <summary>
            Optional. Last name of the other party in a private chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChatMember">
            <summary>
            This object contains information about one member of the chat.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.User">
            <summary>
            Information about the user
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChatMember.Status">
            <summary>
            The member's status in the chat.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ChosenInlineResult">
            <summary>
            This object represents a result of an inline query that was chosen by the user and sent to their chat partner.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.ResultId">
            <summary>
            The unique identifier for the result that was chosen.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.From">
            <summary>
            The user that chose the result.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Location">
            <summary>
            Optional. Sender location, only for bots that require user location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.InlineMessageId">
            <summary>
            Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ChosenInlineResult.Query">
            <summary>
            The query that was used to obtain the result.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Contact">
            <summary>
            This object represents a phone contact.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Contact.UserId">
            <summary>
            Optional. Contact's user identifier in Telegram
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Document">
            <summary>
            This object represents a general file (as opposed to photos and audio files).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.Thumb">
            <summary>
            Document thumbnail as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.FileName">
            <summary>
            Optional. Original filename as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Document.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.File">
            <summary>
            This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot{token}/{file_path}. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.File.FileId">
            <summary>
            Unique identifier for this file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.File.FileSize">
            <summary>
            Optional. File size, if known
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.File.FilePath">
            <summary>
            File path. Use https://api.telegram.org/file/bot{token}/{file_path} to get the file.
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineKeyboardButton">
            <summary>
            This object represents one button of an inline keyboard. You must use exactly one of the optional fields.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineKeyboardButton.Text">
            <summary>
            Label text on the button
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineKeyboardButton.Url">
            <summary>
            Optional. HTTP url to be opened when button is pressed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineKeyboardButton.CallbackData">
            <summary>
            Optional. Data to be sent in a callback query to the bot when button is pressed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineKeyboardButton.SwitchInlineQuery">
            <summary>
            Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field. Can be empty, in which case just the bot’s username will be inserted.
            </summary>
            <remarks>
            Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
            </remarks>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQuery">
            <summary>
            This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Id">
            <summary>
            Unique identifier for this query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.From">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Query">
            <summary>
            Text of the query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Location">
            <summary>
            Optional. Sender location, only for bots that request user location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQuery.Offset">
            <summary>
            Offset of the results to be returned, can be controlled by the bot
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.KeyboardButton">
            <summary>
            This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields are mutually exclusive.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.KeyboardButton.Text">
            <summary>
            Text of the button. If none of the optional fields are used, it will be sent to the bot as a message when the button is pressed
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.KeyboardButton.RequestContact">
            <summary>
            Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.KeyboardButton.RequestLocation">
            <summary>
            Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Location">
            <summary>
            This object represents a point on the map.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Longitude">
            <summary>
            Longitude as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Location.Latitude">
            <summary>
            Latitude as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Message">
            <summary>
            This object represents a message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MessageId">
            <summary>
            Unique message identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.From">
            <summary>
            Sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Date">
            <summary>
            Date the message was sent in Unix time
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Chat">
            <summary>
            Conversation the message belongs to
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFrom">
            <summary>
            Optional. For forwarded messages, sender of the original message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardFromChat">
            <summary>
            Optional. For messages forwarded from a channel, information about the original channel
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ForwardDate">
            <summary>
            Optional. For forwarded messages, date the original message was sent in Unix time
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ReplyToMessage">
            <summary>
            Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.EditDate">
            <summary>
            Optional. Date the message was last edited in Unix time
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Text">
            <summary>
            Optional. For text messages, the actual UTF-8 text of the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Entities">
            <summary>
            Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Audio">
            <summary>
            Optional. Message is an audio file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Document">
            <summary>
            Optional. Message is a general file, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Photo">
            <summary>
            Optional. Message is a photo, available sizes of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Sticker">
            <summary>
            Optional. Message is a sticker, information about the sticker
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Video">
            <summary>
            Optional. Message is a video, information about the video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Voice">
            <summary>
            Message is a voice message, information about the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Caption">
            <summary>
            Caption for the photo or video
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Contact">
            <summary>
            Optional. Message is a shared contact, information about the contact
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Location">
            <summary>
            Optional. Message is a shared location, information about the location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.Venue">
            <summary>
            Optional. Message is a venue, information about the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatMember">
            <summary>
            Optional. A new member was added to the group, information about them (this member may be bot itself)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.LeftChatMember">
            <summary>
            Optional. A member was removed from the group, information about them (this member may be bot itself)
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatTitle">
            <summary>
            Optional. A group title was changed to this value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.NewChatPhoto">
            <summary>
            Optional. A group photo was change to this value
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.DeleteChatPhoto">
            <summary>
            Optional. Informs that the group photo was deleted
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.GroupChatCreated">
            <summary>
            Optional. Informs that the group has been created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.SupergroupChatCreated">
            <summary>
            Optional. Service message: the supergroup has been created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.ChannelChatCreated">
            <summary>
            Optional. Service message: the channel has been created
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateToChatId">
            <summary>
            Optional. The group has been migrated to a supergroup with the specified identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.MigrateFromChatId">
            <summary>
            Optional. The supergroup has been migrated from a group with the specified identifier
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Message.PinnedMessage">
            <summary>
            Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.MessageEntity">
            <summary>
            This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Type">
            <summary>
            Type of the entity
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Offset">
            <summary>
            Offset in UTF-16 code units to the start of the entity
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Length">
            <summary>
            Length of the entity in UTF-16 code units
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.Url">
            <summary>
            Optional. For "text_link" only, url that will be opened after user taps on the text
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.MessageEntity.User">
            <summary>
            Optional. For "text_mention" only, the mentioned user
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.PhotoSize">
            <summary>
            This object represents one size of a photo or a file / sticker thumbnail.
            </summary>
            <remarks>A missing thumbnail for a file (or sticker) is presented as an empty object.</remarks>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Width">
            <summary>
            Photo width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.PhotoSize.Height">
            <summary>
            Photo height
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Sticker">
            <summary>
            This object represents a sticker.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Width">
            <summary>
            Sticker width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Height">
            <summary>
            Sticker height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Thumb">
            <summary>
            Sticker thumbnail in .webp or .jpg format
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Sticker.Emoji">
            <summary>
            Emoji associated with the sticker
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Update">
            <summary>
            This object represents an incoming update.
            </summary>
            <remarks>
            Only one of the optional parameters can be present in any given update.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Id">
            <summary>
            The update‘s unique identifier. Update identifiers start from a certain positive number and increase sequentially.
            This ID becomes especially handy if you’re using Webhooks, since it allows you to ignore repeated updates or to
            restore the correct update sequence, should they get out of order.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.Message">
            <summary>
            Optional. New incoming message of any kind — text, photo, sticker, etc.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.EditedMessage">
            <summary>
            Optional. New version of a message that is known to the bot and was edited
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.InlineQuery">
            <summary>
            Optional. New incoming inline query
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.ChosenInlineResult">
            <summary>
            Optional. The result of a inline query that was chosen by a user and sent to their chat partner
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Update.CallbackQuery">
            <summary>
            Optional. New incoming callback query
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.User">
            <summary>
            This object represents a Telegram user or bot.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.Id">
            <summary>
            Unique identifier for this user or bot
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telegram.Bot.Types.User.FirstName">
            <summary>
            User‘s or bot’s first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.LastName">
            <summary>
            Optional. User‘s or bot’s last name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.User.Username">
            <summary>
            Optional. User‘s or bot’s username
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.UserProfilePhotos">
            <summary>
            This object represent a user's profile pictures.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.TotalCount">
            <summary>
            Total number of profile pictures the target user has
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.UserProfilePhotos.Photos">
            <summary>
            Requested profile pictures (in up to 4 sizes each)
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Venue">
            <summary>
            This object represents a venue.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Location">
            <summary>
            Venue location
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Title">
            <summary>
            Title of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Venue.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Video">
            <summary>
            This object represents a video file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Width">
            <summary>
            Video width as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Height">
            <summary>
            Video height as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Duration">
            <summary>
            Duration of the video in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.Thumb">
            <summary>
            Video thumbnail
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Video.MimeType">
            <summary>
            Optional. Mime type of a file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Voice">
            <summary>
            This object represents a voice note.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.Duration">
            <summary>
            Duration of the audio in seconds as defined by sender
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.Voice.MimeType">
            <summary>
            Optional. MIME type of the file as defined by sender
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatAction">
            <summary>
            Type of action the Bot is performing
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatMemberStatus">
            <summary>
            ChatMember status
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ChatType">
            <summary>
            Type of a Chat
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.MessageType">
            <summary>
            The type of a Message
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.ParseMode">
            <summary>
            Text parsing mode
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.Enums.UpdateType">
            <summary>
            The type of an Update
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Id">
            <summary>
            Unique identifier of this result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Type">
            <summary>
            Type of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.Title">
            <summary>
            Title of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.InputMessageContent">
            <summary>
            Content of the message to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResult.ReplyMarkup">
            <summary>
            Inline keyboard attached to the message
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle">
            <summary>
            Represents a link to an article or web page.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Url">
            <summary>
            Optional. URL of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.HideUrl">
            <summary>
            Optional. Pass True, if you don't want the URL to be shown in the message
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultArticle.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio">
            <summary>
            Represents a link to an mp3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.FileId">
            <summary>
            A valid file identifier for the audio file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Url">
            <summary>
            A valid URL for the audio file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Performer">
            <summary>
            Optional. Performer
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultAudio.Duration">
            <summary>
            Optional. Audio duration in seconds
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCached">
            <summary>
            Represents a link to a result stored on the Telegram servers. By default, this result will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCached.Caption">
            <summary>
            Optional. Caption of the result to be sent, 0-200 characters
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio">
            <summary>
            Represents a link to an mp3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedAudio.FileId">
            <summary>
            A valid file identifier for the audio file
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument">
            <summary>
            Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only pdf-files and zip archives can be sent using this method.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.FileId">
            <summary>
            A valid file identifier for the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedDocument.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif">
            <summary>
            Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedGif.FileId">
            <summary>
            A valid file identifier for the GIF file
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif">
            <summary>
            Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedMpeg4Gif.FileId">
            <summary>
            A valid file identifier for the MP4 file
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto">
            <summary>
            Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.FileId">
            <summary>
            A valid file identifier of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedPhoto.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker">
            <summary>
            Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedSticker.FileId">
            <summary>
            A valid file identifier of the sticker
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo">
            <summary>
            Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.FileId">
            <summary>
            A valid file identifier for the video file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVideo.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice">
            <summary>
            Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultCachedVoice.FileId">
            <summary>
            A valid file identifier for the voice message
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact">
            <summary>
            Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.
            </summary>
            <remarks>
            This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultContact.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument">
            <summary>
            Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.
            </summary>
            <remarks>
            This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Caption">
            <summary>
            Optional. Caption of the document to be sent, 0-200 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Url">
            <summary>
            A valid URL for the file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.MimeType">
            <summary>
            Mime type of the content of the file, either “application/pdf” or “application/zip”
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultDocument.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif">
            <summary>
            Represents a link to an animated GIF file.
            By default, this animated GIF file will be sent by the user with optional caption.
            Alternatively, you can provide message_text to send it instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Url">
            <summary>
            A valid URL for the GIF file. File size must not exceed 1MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Width">
            <summary>
            Optional. Width of the GIF
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Height">
            <summary>
            Optional. Height of the GIF
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultGif.Caption">
            <summary>
            Optional. Caption of the GIF file to be sent
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation">
            <summary>
            Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.
            </summary>
            <remarks>
            This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Latitude">
            <summary>
            Latitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultLocation.Longitude">
            <summary>
            Longitude of the location in degrees
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif">
            <summary>
            Represents a link to a video animation (H.264/MPEG-4 AVC video without sound).
            By default, this animated MPEG-4 file will be sent by the user with optional caption.
            Alternatively, you can provide message_text to send it instead of the animation.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Url">
            <summary>
            A valid URL for the MP4 file. File size must not exceed 1MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Width">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Height">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultMpeg4Gif.Caption">
            <summary>
            Optional. Caption of the MPEG-4 file to be sent
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultNew.ThumbUrl">
            <summary>
            Optional. Url of the thumbnail for the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultNew.ThumbWidth">
            <summary>
            Optional. Thumbnail width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultNew.ThumbHeight">
            <summary>
            Optional. Thumbnail height
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto">
            <summary>
            Represents a link to a photo.
            By default, this photo will be sent by the user with optional caption.
            Alternatively, you can provide message_text to send it instead of photo.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Url">
            <summary>
            A valid URL of the photo. Photo size must not exceed 5MB
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Width">
            <summary>
            Optional. Width of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Height">
            <summary>
            Optional. Height of the photo
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultPhoto.Caption">
            <summary>
            Optional. Caption of the photo to be sent
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultType">
            <summary>
            Type of the InlineQueryResult
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue">
            <summary>
            Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.
            </summary>
            <remarks>
            This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Latitude">
            <summary>
            Latitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Longitude">
            <summary>
            Longitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVenue.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue if known
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo">
            <summary>
            Represents link to a page containing an embedded video player or a video file.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Url">
            <summary>
            A valid URL for the embedded video player or video file
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.MimeType">
            <summary>
            Mime type of the content of video url, i.e. "text/html" or "video/mp4"
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Width">
            <summary>
            Optional. Video width
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Height">
            <summary>
            Optional. Video height
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Duration">
            <summary>
            Optional. Video duration in seconds
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Description">
            <summary>
            Optional. Short description of the result
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVideo.Caption">
            <summary>
            Optional. Caption of the photo to be sent
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice">
            <summary>
            Represents a link to a voice recording in an .ogg container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.
            </summary>
            <remarks>
            This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Url">
            <summary>
            A valid URL for the voice recording
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InlineQueryResults.InlineQueryResultVoice.Duration">
            <summary>
            Optional. Recording duration in seconds
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMessageContents.InputContactMessageContent">
            <summary>
            Represents the content of a contact message to be sent as the result of an inline query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputContactMessageContent.PhoneNumber">
            <summary>
            Contact's phone number
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputContactMessageContent.FirstName">
            <summary>
            Contact's first name
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputContactMessageContent.LastName">
            <summary>
            Optional. Contact's last name
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMessageContents.InputLocationMessageContent">
            <summary>
            Represents the content of a location message to be sent as the result of an inline query.
            </summary>
            <remarks>
            This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.
            </remarks>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputLocationMessageContent.Latitude">
            <summary>
            Latitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputLocationMessageContent.Longitude">
            <summary>
            Longitude of the location in degrees
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMessageContents.InputMessageContent">
            <summary>
            This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types InputTextMessageContent, InputLocationMessageContent, InputVenueMessageContent, InputContactMessageContent
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMessageContents.InputTextMessageContent">
            <summary>
            Represents the content of a text message to be sent as the result of an inline query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputTextMessageContent.MessageText">
            <summary>
            Text of the message to be sent, 1-4096 characters
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputTextMessageContent.ParseMode">
            <summary>
            Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputTextMessageContent.DisableWebPagePreview">
            <summary>
            Optional. Disables link previews for links in the sent message
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.InputMessageContents.InputVenueMessageContent">
            <summary>
            Represents the content of a venue message to be sent as the result of an inline query.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputVenueMessageContent.Latitude">
            <summary>
            Latitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputVenueMessageContent.Longitude">
            <summary>
            Longitude of the location in degrees
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputVenueMessageContent.Name">
            <summary>
            Name of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputVenueMessageContent.Address">
            <summary>
            Address of the venue
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.InputMessageContents.InputVenueMessageContent.FoursquareId">
            <summary>
            Optional. Foursquare identifier of the venue, if known
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ForceReply">
            <summary>
            Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot‘s message and tapped ’Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ForceReply.Force">
            <summary>
            Shows reply interface to the user, as if they manually selected the bot‘s message and tapped ’Reply'
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup">
            <summary>
            This object represents an inline keyboard that appears right next to the message it belongs to.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.InlineKeyboardMarkup.InlineKeyboard">
            <summary>
            Array of button rows, each represented by an Array of InlineKeyboardButton objects
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardHide">
            <summary>
            Upon receiving a message with this object, Telegram clients will hide the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardHide.HideKeyboard">
            <summary>
            Requests clients to hide the custom keyboard
            </summary>
        </member>
        <member name="T:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup">
            <summary>
            This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.Keyboard">
            <summary>
            Array of button rows, each represented by an Array of KeyboardButton objects
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.ResizeKeyboard">
            <summary>
            Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyKeyboardMarkup.OneTimeKeyboard">
            <summary>
            Optional. Requests clients to hide the keyboard as soon as it's been used. Defaults to false.
            </summary>
        </member>
        <member name="P:Telegram.Bot.Types.ReplyMarkups.ReplyMarkup.Selective">
            <summary>
            Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.
            Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language.Other users in the group don’t see the keyboard.
            </summary>
        </member>
    </members>
</doc>
